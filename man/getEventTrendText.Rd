% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getEventCountText.R, R/getEventTrendText.R
\name{getEventTrendText}
\alias{getEventTrendText}
\title{Analyze Conflict Event Trends}
\usage{
getEventTrendText(
  event.df,
  event.date.col,
  ctry.id.col,
  ctry.id,
  event.type.col,
  target.start.date,
  target.end.date,
  baseline.start.date,
  baseline.end.date,
  trend.period.months = 12,
  trend.end.date = NULL,
  use.ctry.regex = TRUE,
  by.event.type = TRUE,
  aggregate.by = "month",
  output.as.text = TRUE
)

getEventTrendText(
  event.df,
  event.date.col,
  ctry.id.col,
  ctry.id,
  event.type.col,
  target.start.date,
  target.end.date,
  baseline.start.date,
  baseline.end.date,
  trend.period.months = 12,
  trend.end.date = NULL,
  use.ctry.regex = TRUE,
  by.event.type = TRUE,
  aggregate.by = "month",
  output.as.text = TRUE
)
}
\arguments{
\item{event.df}{data.frame. Conflict event data.}

\item{event.date.col}{character. Column name with event dates.}

\item{ctry.id.col}{character. Column name with country identifiers.}

\item{ctry.id}{character vector. Country identifier(s) to filter by.}

\item{event.type.col}{character. Column name with event type.}

\item{target.start.date}{Date or YYYY-MM-DD. Start of target period.}

\item{target.end.date}{Date or YYYY-MM-DD. End of target period.}

\item{baseline.start.date}{Date or YYYY-MM-DD. Start of baseline period.}

\item{baseline.end.date}{Date or YYYY-MM-DD. End of baseline period.}

\item{trend.period.months}{integer. Number of months for the trend window. Default 12.}

\item{trend.end.date}{Date or YYYY-MM-DD or NULL. End of trend window. Default = target.end.date.}

\item{use.ctry.regex}{logical. If TRUE, regex-match countries; else exact match. Default TRUE.}

\item{by.event.type}{logical. If TRUE, compute by event type; else totals. Default TRUE.}

\item{aggregate.by}{character. One of "month","quarter","year". Default "month".}

\item{output.as.text}{logical. If TRUE (default) return single character string; else data.frame.}
}
\value{
If output.as.text = FALSE, a data.frame with:
  country, (event_type), baseline_start/end, target_start/end, trend_start/end,
  baseline_count, target_count, baseline_intervals, target_intervals,
  baseline_avg, target_avg, pct_change, pct_change_label,
  trend_slope, trend_label, and the two interpretation columns.
  If output.as.text = TRUE, a single character string with one block per country.

If output.as.text = FALSE, a data.frame with:
  country, (event_type), baseline_start/end, target_start/end, trend_start/end,
  baseline_count, target_count, baseline_intervals, target_intervals,
  baseline_avg, target_avg, pct_change, pct_change_label,
  trend_slope, trend_label, and the two interpretation columns.
  If output.as.text = TRUE, a single character string with one block per country.
}
\description{
Computes recent change (baseline -> target, normalized by interval) and long-term trend
(slope over a specified window). Returns either a structured data.frame or a single
text block summarizing results per country.

Computes recent change (baseline -> target, normalized by interval) and long-term trend
(slope over a specified window). Returns either a structured data.frame or a single
text block summarizing results per country.
}
\examples{
\dontrun{
# Example with ACLED data
result <- getEventTrendText(
  event.df = acled.df,
  event.date.col = "event_date",
  ctry.id.col = "country",
  ctry.id = "Nigeria",
  event.type.col = "event_type",
  target.start.date = "2023-07-01",
  target.end.date = "2023-12-31",
  baseline.start.date = "2023-01-01",
  baseline.end.date = "2023-06-30"
)
}

\dontrun{
# Example with ACLED data
result <- getEventTrendText(
  event.df = acled.df,
  event.date.col = "event_date",
  ctry.id.col = "country",
  ctry.id = "Nigeria",
  event.type.col = "event_type",
  target.start.date = "2023-07-01",
  target.end.date = "2023-12-31",
  baseline.start.date = "2023-01-01",
  baseline.end.date = "2023-06-30"
)
}

}
